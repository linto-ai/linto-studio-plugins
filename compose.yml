services:
  #---------- optional services
  # Convenient rapid mosquitto and posgres startup configuration
  # You will need to configure it depending on your need for custom deployments
  broker:
    image: eclipse-mosquitto:latest
    expose:
      - "${BROKER_PORT}"
    ports:
      - "${BROKER_PORT}:${BROKER_PORT}"
    command: mosquitto -c /mosquitto-no-auth.conf

  database:
    image: postgres:latest
    expose:
      - "${DB_PORT}"
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    command: -p ${DB_PORT}
  #----------

  migration:
    build:
      context: .
      dockerfile: migration/Dockerfile
    env_file:
      - .envdefault
      - .env
    environment:
      - DB_HOST=database
      - NODE_ENV=production
    depends_on:
      - database

  transcriber:
    build:
      context: .
      dockerfile: Transcriber/Dockerfile
    env_file:
      - .envdefault
      - .env
    environment:
      - BROKER_HOST=localhost
      - DEBUG=transcriber:*
    depends_on:
      - broker
    network_mode: host
    deploy:
      replicas: ${TRANSCRIBER_REPLICAS}

  sessionapi:
    build:
      context: .
      dockerfile: Session-API/Dockerfile
    env_file:
      - .envdefault
      - .env
    environment:
      - BROKER_HOST=broker
      - DB_HOST=database
      - DEBUG=session-api:*
    expose:
      - "${SESSION_API_WEBSERVER_HTTP_PORT}"
    ports:
      - "${SESSION_API_WEBSERVER_HTTP_PORT}:${SESSION_API_WEBSERVER_HTTP_PORT}"
    depends_on:
      broker:
        condition: service_started
      migration:
        condition: service_completed_successfully

  scheduler:
    build:
      context: .
      dockerfile: Scheduler/Dockerfile
    env_file:
      - .envdefault
      - .env
    environment:
      - BROKER_HOST=broker
      - DB_HOST=database
      - DEBUG=scheduler:*
    expose:
      - "${SCHEDULER_WEBSERVER_HTTP_PORT}"
    depends_on:
      broker:
        condition: service_started
      migration:
        condition: service_completed_successfully
