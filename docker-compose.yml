services:
  #---------- optional services
  # Convenient rapid mosquitto and posgres startup configuration
  # You will need to configure it depending on your need for custom deployments
  reverse-proxy:
    image: traefik:v2.10
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=${LETS_ENCRYPT_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.rule=Host(`${DOMAIN_NAME}`)"

  broker:
    image: eclipse-mosquitto:latest
    expose:
      - "${BROKER_PORT}"
    ports:
      - "${BROKER_PORT}:${BROKER_PORT}"
    restart: always
    command: mosquitto -c /mosquitto-no-auth.conf

  database:
    image: postgres:latest
    expose:
      - "${DB_PORT}"
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    command: -p ${DB_PORT}
    restart: always
  #----------

  migration:
    build:
      context: .
      dockerfile: migration/Dockerfile
    env_file:
      - .envdefault
      - .env
    environment:
      - DB_HOST=database
      - NODE_ENV=production
    depends_on:
      - database

  delivery:
    build:
      context: .
      dockerfile: Delivery/Dockerfile
    env_file:
      - .envdefault
      - .env
    environment:
      - BROKER_HOST=broker
      - DEBUG=delivery:*
    ports:
      - "${DELIVERY_WEBSERVER_HTTP_PORT}:${DELIVERY_WEBSERVER_HTTP_PORT}"
    depends_on:
      - broker
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.delivery.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/delivery`)"
      - "traefik.http.routers.delivery.middlewares=delivery-strip"
      - "traefik.http.routers.delivery.entrypoints=websecure"
      - "traefik.http.routers.delivery.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.delivery-strip.stripprefix.prefixes=/delivery"
      - "traefik.http.middlewares.delivery-strip.stripprefix.forceslash=false"

  transcriber:
    build:
      context: .
      dockerfile: Transcriber/Dockerfile
    env_file:
      - .envdefault
      - .env
    environment:
      - BROKER_HOST=localhost
      - DEBUG=transcriber:*
    depends_on:
      - broker
    restart: always
    deploy:
      replicas: ${TRANSCRIBER_REPLICAS}
    network_mode: host
    healthcheck:
      test: none

  sessionapi:
    build:
      context: .
      dockerfile: Session-API/Dockerfile
    env_file:
      - .envdefault
      - .env
    environment:
      - BROKER_HOST=broker
      - DB_HOST=database
      - DEBUG=session-api:*
    expose:
      - "${SESSION_API_WEBSERVER_HTTP_PORT}"
    ports:
      - "${SESSION_API_WEBSERVER_HTTP_PORT}:${SESSION_API_WEBSERVER_HTTP_PORT}"
    depends_on:
      broker:
        condition: service_started
      migration:
        condition: service_completed_successfully
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sessionapi.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/sessionapi`)"
      - "traefik.http.routers.sessionapi.middlewares=sessionapi-strip"
      - "traefik.http.routers.sessionapi.entrypoints=websecure"
      - "traefik.http.routers.sessionapi.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.sessionapi-strip.stripprefix.prefixes=/sessionapi"
      - "traefik.http.middlewares.sessionapi-strip.stripprefix.forceslash=false"

  scheduler:
    build:
      context: .
      dockerfile: Scheduler/Dockerfile
    env_file:
      - .envdefault
      - .env
    environment:
      - BROKER_HOST=broker
      - DB_HOST=database
      - DEBUG=scheduler:*
    ports:
      - "${SCHEDULER_WEBSERVER_HTTP_PORT}:${SCHEDULER_WEBSERVER_HTTP_PORT}"
    expose:
      - "${SCHEDULER_WEBSERVER_HTTP_PORT}"
    depends_on:
      broker:
        condition: service_started
      migration:
        condition: service_completed_successfully
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.scheduler.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/scheduler`)"
      - "traefik.http.routers.scheduler.middlewares=scheduler-strip"
      - "traefik.http.routers.sessionapi.entrypoints=websecure"
      - "traefik.http.routers.sessionapi.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.scheduler-strip.stripprefix.prefixes=/scheduler"
      - "traefik.http.middlewares.scheduler-strip.stripprefix.forceslash=false"

  frontend:
    build:
      context: .
      dockerfile: front-end/Dockerfile
    ports:
      - "${FRONT_END_PORT}:${FRONT_END_PORT}"
    expose:
      - "${FRONT_END_PORT}"
    env_file:
      - .envdefault
      - .env
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/frontend`)"
      - "traefik.http.routers.frontend.middlewares=frontend-strip"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.frontend-strip.stripprefix.prefixes=/frontend"
      - "traefik.http.middlewares.frontend-strip.stripprefix.forceslash=false"
